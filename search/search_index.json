{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Documentation","text":"<p>Welcome to the project documentation. Consult the Divine Law to understand the sacred rules governing this codebase.</p>"},{"location":"COVENANT/","title":"Covenant of Solar Khan","text":"<p>The latest scroll from the Testament of Covenant binds this repository. All contributors pledge to uphold its principles of openness, honor, and eternal iteration.</p>"},{"location":"aws-ec2-setup/","title":"AWS EC2 Setup and Deployment Guide","text":"<p>This guide provides step-by-step instructions for setting up and deploying the MKWW Website on AWS EC2.</p>"},{"location":"aws-ec2-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with EC2 access</li> <li>Basic knowledge of AWS services</li> <li>Domain name (optional but recommended)</li> <li>SSH key pair</li> </ul>"},{"location":"aws-ec2-setup/#step-1-launch-ec2-instance","title":"Step 1: Launch EC2 Instance","text":""},{"location":"aws-ec2-setup/#11-choose-ami","title":"1.1 Choose AMI","text":"<ul> <li>Recommended: Ubuntu Server 20.04 LTS (HVM), SSD Volume Type</li> <li>Alternative: Amazon Linux 2 AMI</li> </ul>"},{"location":"aws-ec2-setup/#12-choose-instance-type","title":"1.2 Choose Instance Type","text":"<ul> <li>Free Tier: t2.micro (1 vCPU, 1 GB RAM)</li> <li>Production: t3.small or larger (2 vCPU, 2 GB RAM)</li> </ul>"},{"location":"aws-ec2-setup/#13-configure-instance-details","title":"1.3 Configure Instance Details","text":"<ul> <li>Network: Default VPC</li> <li>Subnet: Any public subnet</li> <li>Auto-assign Public IP: Enable</li> </ul>"},{"location":"aws-ec2-setup/#14-configure-security-group","title":"1.4 Configure Security Group","text":"<p>Create a new security group with the following rules:</p> Type Protocol Port Range Source Description SSH TCP 22 0.0.0.0/0 SSH access HTTP TCP 80 0.0.0.0/0 HTTP traffic HTTPS TCP 443 0.0.0.0/0 HTTPS traffic Custom TCP TCP 3000 0.0.0.0/0 Development server"},{"location":"aws-ec2-setup/#15-review-and-launch","title":"1.5 Review and Launch","text":"<ul> <li>Review your configuration</li> <li>Select or create a key pair</li> <li>Launch the instance</li> </ul>"},{"location":"aws-ec2-setup/#step-2-connect-to-ec2-instance","title":"Step 2: Connect to EC2 Instance","text":""},{"location":"aws-ec2-setup/#21-using-ssh-linuxmac","title":"2.1 Using SSH (Linux/Mac)","text":"<pre><code>ssh -i your-key.pem ubuntu@your-ec2-public-ip\n</code></pre>"},{"location":"aws-ec2-setup/#22-using-putty-windows","title":"2.2 Using PuTTY (Windows)","text":"<ol> <li>Convert your .pem key to .ppk format using PuTTYgen</li> <li>Use PuTTY to connect with the .ppk key</li> </ol>"},{"location":"aws-ec2-setup/#step-3-initial-server-setup","title":"Step 3: Initial Server Setup","text":""},{"location":"aws-ec2-setup/#31-update-system","title":"3.1 Update System","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"aws-ec2-setup/#32-install-essential-packages","title":"3.2 Install Essential Packages","text":"<pre><code>sudo apt install -y curl wget git unzip software-properties-common\n</code></pre>"},{"location":"aws-ec2-setup/#33-configure-firewall-optional","title":"3.3 Configure Firewall (Optional)","text":"<pre><code>sudo ufw allow OpenSSH\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n</code></pre>"},{"location":"aws-ec2-setup/#step-4-install-nodejs","title":"Step 4: Install Node.js","text":""},{"location":"aws-ec2-setup/#41-add-nodesource-repository","title":"4.1 Add NodeSource Repository","text":"<pre><code>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\n</code></pre>"},{"location":"aws-ec2-setup/#42-install-nodejs","title":"4.2 Install Node.js","text":"<pre><code>sudo apt-get install -y nodejs\n</code></pre>"},{"location":"aws-ec2-setup/#43-verify-installation","title":"4.3 Verify Installation","text":"<pre><code>node --version\nnpm --version\n</code></pre>"},{"location":"aws-ec2-setup/#step-5-install-pm2","title":"Step 5: Install PM2","text":"<p>PM2 is a process manager for Node.js applications.</p> <pre><code>sudo npm install -g pm2\n</code></pre>"},{"location":"aws-ec2-setup/#step-6-install-nginx","title":"Step 6: Install Nginx","text":""},{"location":"aws-ec2-setup/#61-install-nginx","title":"6.1 Install Nginx","text":"<pre><code>sudo apt install nginx -y\n</code></pre>"},{"location":"aws-ec2-setup/#62-start-and-enable-nginx","title":"6.2 Start and Enable Nginx","text":"<pre><code>sudo systemctl start nginx\nsudo systemctl enable nginx\n</code></pre>"},{"location":"aws-ec2-setup/#63-verify-installation","title":"6.3 Verify Installation","text":"<pre><code>sudo systemctl status nginx\n</code></pre>"},{"location":"aws-ec2-setup/#step-7-deploy-application","title":"Step 7: Deploy Application","text":""},{"location":"aws-ec2-setup/#71-clone-repository","title":"7.1 Clone Repository","text":"<pre><code>git clone https://github.com/M-K-World-Wide/Home.git\ncd Home\n</code></pre>"},{"location":"aws-ec2-setup/#72-install-dependencies","title":"7.2 Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"aws-ec2-setup/#73-build-application","title":"7.3 Build Application","text":"<pre><code>npm run build\n</code></pre>"},{"location":"aws-ec2-setup/#74-start-with-pm2","title":"7.4 Start with PM2","text":"<pre><code>pm2 start npm --name \"mkww-website\" -- start\npm2 startup\npm2 save\n</code></pre>"},{"location":"aws-ec2-setup/#step-8-configure-nginx","title":"Step 8: Configure Nginx","text":""},{"location":"aws-ec2-setup/#81-create-nginx-configuration","title":"8.1 Create Nginx Configuration","text":"<pre><code>sudo nano /etc/nginx/sites-available/mkww-website\n</code></pre> <p>Add the following configuration:</p> <pre><code>server {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre>"},{"location":"aws-ec2-setup/#82-enable-site","title":"8.2 Enable Site","text":"<pre><code>sudo ln -s /etc/nginx/sites-available/mkww-website /etc/nginx/sites-enabled/\nsudo rm -f /etc/nginx/sites-enabled/default\n</code></pre>"},{"location":"aws-ec2-setup/#83-test-and-restart-nginx","title":"8.3 Test and Restart Nginx","text":"<pre><code>sudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"aws-ec2-setup/#step-9-ssl-certificate-optional","title":"Step 9: SSL Certificate (Optional)","text":""},{"location":"aws-ec2-setup/#91-install-certbot","title":"9.1 Install Certbot","text":"<pre><code>sudo apt install certbot python3-certbot-nginx -y\n</code></pre>"},{"location":"aws-ec2-setup/#92-get-ssl-certificate","title":"9.2 Get SSL Certificate","text":"<pre><code>sudo certbot --nginx -d your-domain.com -d www.your-domain.com\n</code></pre>"},{"location":"aws-ec2-setup/#93-set-up-auto-renewal","title":"9.3 Set Up Auto-renewal","text":"<pre><code>sudo crontab -e\n</code></pre> <p>Add this line:</p> <pre><code>0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"aws-ec2-setup/#step-10-monitoring-and-maintenance","title":"Step 10: Monitoring and Maintenance","text":""},{"location":"aws-ec2-setup/#101-pm2-commands","title":"10.1 PM2 Commands","text":"<pre><code>pm2 status              # Check application status\npm2 logs mkww-website   # View logs\npm2 restart mkww-website # Restart application\npm2 stop mkww-website   # Stop application\npm2 delete mkww-website # Remove application\n</code></pre>"},{"location":"aws-ec2-setup/#102-nginx-commands","title":"10.2 Nginx Commands","text":"<pre><code>sudo nginx -t           # Test configuration\nsudo systemctl status nginx  # Check status\nsudo systemctl restart nginx # Restart nginx\nsudo systemctl reload nginx  # Reload configuration\n</code></pre>"},{"location":"aws-ec2-setup/#103-log-files","title":"10.3 Log Files","text":"<pre><code># PM2 logs\npm2 logs mkww-website\n\n# Nginx logs\nsudo tail -f /var/log/nginx/access.log\nsudo tail -f /var/log/nginx/error.log\n\n# System logs\nsudo journalctl -u nginx\n</code></pre>"},{"location":"aws-ec2-setup/#step-11-automated-deployment","title":"Step 11: Automated Deployment","text":""},{"location":"aws-ec2-setup/#111-using-deployment-script","title":"11.1 Using Deployment Script","text":"<pre><code>chmod +x scripts/deploy.sh\n./scripts/deploy.sh\n</code></pre>"},{"location":"aws-ec2-setup/#112-using-ssl-setup-script","title":"11.2 Using SSL Setup Script","text":"<pre><code>chmod +x scripts/ssl-setup.sh\n./scripts/ssl-setup.sh your-domain.com\n</code></pre>"},{"location":"aws-ec2-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"aws-ec2-setup/#common-issues","title":"Common Issues","text":"<ol> <li>Application not accessible</li> <li>Check if PM2 is running: <code>pm2 status</code></li> <li>Check if Nginx is running: <code>sudo systemctl status nginx</code></li> <li> <p>Check security group settings</p> </li> <li> <p>502 Bad Gateway</p> </li> <li>Check application logs: <code>pm2 logs mkww-website</code></li> <li>Verify proxy_pass configuration</li> <li> <p>Check if application is listening on port 3000</p> </li> <li> <p>SSL Certificate Issues</p> </li> <li>Check domain DNS settings</li> <li>Verify Certbot installation</li> <li> <p>Check certificate status: <code>sudo certbot certificates</code></p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor system resources: <code>htop</code></li> <li>Check PM2 memory usage: <code>pm2 monit</code></li> <li>Optimize Nginx configuration</li> </ol>"},{"location":"aws-ec2-setup/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Enable Gzip Compression</li> <li>Configure Browser Caching</li> <li>Use CDN for Static Assets</li> <li>Optimize Images</li> <li>Enable HTTP/2</li> </ol>"},{"location":"aws-ec2-setup/#security-best-practices","title":"Security Best Practices","text":"<ol> <li> <p>Keep System Updated <code>bash    sudo apt update &amp;&amp; sudo apt upgrade -y</code></p> </li> <li> <p>Configure Firewall <code>bash    sudo ufw enable    sudo ufw allow ssh    sudo ufw allow 'Nginx Full'</code></p> </li> <li> <p>Use SSH Keys Only <code>bash    sudo nano /etc/ssh/sshd_config    # Set PasswordAuthentication no</code></p> </li> <li> <p>Regular Backups    ```bash    # Backup application    tar -czf mkww-website-backup.tar.gz /var/www/mkww-website</p> </li> </ol> <p># Backup Nginx configuration    sudo tar -czf nginx-config-backup.tar.gz /etc/nginx    ```</p>"},{"location":"aws-ec2-setup/#cost-optimization","title":"Cost Optimization","text":"<ol> <li>Use Reserved Instances for long-term deployments</li> <li>Monitor Usage with AWS CloudWatch</li> <li>Use Spot Instances for development/testing</li> <li>Optimize Instance Size based on actual usage</li> </ol>"},{"location":"aws-ec2-setup/#next-steps","title":"Next Steps","text":"<ol> <li>Set up monitoring with AWS CloudWatch</li> <li>Configure automated backups</li> <li>Set up CI/CD pipeline</li> <li>Implement load balancing for high availability</li> <li>Set up CDN for global performance </li> </ol>"},{"location":"ci-cd-pipeline/","title":"CI/CD Pipeline Setup Guide","text":"<p>This guide explains how to set up a continuous integration and continuous deployment (CI/CD) pipeline for the MKWW Website.</p>"},{"location":"ci-cd-pipeline/#overview","title":"Overview","text":"<p>The CI/CD pipeline will automatically: 1. Build the application when code is pushed to GitHub 2. Run tests and linting 3. Deploy to AWS EC2 4. Send notifications on success/failure</p>"},{"location":"ci-cd-pipeline/#github-actions-setup","title":"GitHub Actions Setup","text":""},{"location":"ci-cd-pipeline/#1-create-github-actions-workflow","title":"1. Create GitHub Actions Workflow","text":"<p>Create the file <code>.github/workflows/deploy.yml</code>:</p> <pre><code>name: Deploy to AWS EC2\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run linting\n      run: npm run lint\n\n    - name: Run tests\n      run: npm test\n\n    - name: Build application\n      run: npm run build\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Build application\n      run: npm run build\n\n    - name: Deploy to EC2\n      uses: appleboy/ssh-action@v0.1.5\n      with:\n        host: ${{ secrets.EC2_HOST }}\n        username: ${{ secrets.EC2_USERNAME }}\n        key: ${{ secrets.EC2_SSH_KEY }}\n        script: |\n          cd /var/www/mkww-website\n          git pull origin main\n          npm ci\n          npm run build\n          pm2 restart mkww-website\n          sudo systemctl reload nginx\n\n    - name: Notify on success\n      if: success()\n      uses: 8398a7/action-slack@v3\n      with:\n        status: success\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        text: '\u2705 MKWW Website deployed successfully!'\n\n    - name: Notify on failure\n      if: failure()\n      uses: 8398a7/action-slack@v3\n      with:\n        status: failure\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        text: '\u274c MKWW Website deployment failed!'\n</code></pre>"},{"location":"ci-cd-pipeline/#2-configure-github-secrets","title":"2. Configure GitHub Secrets","text":"<p>Go to your GitHub repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions, and add the following secrets:</p> <ul> <li><code>EC2_HOST</code>: Your EC2 instance public IP or domain</li> <li><code>EC2_USERNAME</code>: SSH username (usually <code>ubuntu</code>)</li> <li><code>EC2_SSH_KEY</code>: Your private SSH key</li> <li><code>SLACK_WEBHOOK</code>: Slack webhook URL for notifications (optional)</li> </ul>"},{"location":"ci-cd-pipeline/#3-generate-ssh-key-for-github-actions","title":"3. Generate SSH Key for GitHub Actions","text":"<pre><code># Generate a new SSH key pair\nssh-keygen -t rsa -b 4096 -C \"github-actions@mkww-website\" -f ~/.ssh/github-actions\n\n# Add public key to EC2 instance\nssh-copy-id -i ~/.ssh/github-actions.pub ubuntu@your-ec2-ip\n\n# Copy private key content for GitHub secret\ncat ~/.ssh/github-actions\n</code></pre>"},{"location":"ci-cd-pipeline/#alternative-aws-codepipeline","title":"Alternative: AWS CodePipeline","text":""},{"location":"ci-cd-pipeline/#1-create-codebuild-project","title":"1. Create CodeBuild Project","text":"<p>Create <code>buildspec.yml</code> in your repository:</p> <pre><code>version: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: 18\n    commands:\n      - echo Installing dependencies...\n      - npm ci\n\n  pre_build:\n    commands:\n      - echo Running tests...\n      - npm run lint\n      - npm test\n\n  build:\n    commands:\n      - echo Building application...\n      - npm run build\n      - echo Build completed successfully\n\n  post_build:\n    commands:\n      - echo Deploying to EC2...\n      - aws s3 sync dist/ s3://your-s3-bucket/\n      - aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths \"/*\"\n\nartifacts:\n  files:\n    - '**/*'\n  base-directory: 'dist'\n</code></pre>"},{"location":"ci-cd-pipeline/#2-create-codedeploy-application","title":"2. Create CodeDeploy Application","text":"<p>Create <code>appspec.yml</code> in your repository:</p> <pre><code>version: 0.0\nos: linux\n\nfiles:\n  - source: /\n    destination: /var/www/mkww-website\n\nhooks:\n  BeforeInstall:\n    - location: scripts/before_install.sh\n      timeout: 300\n      runas: root\n\n  AfterInstall:\n    - location: scripts/after_install.sh\n      timeout: 300\n      runas: ubuntu\n\n  ApplicationStart:\n    - location: scripts/start_application.sh\n      timeout: 300\n      runas: ubuntu\n\n  ApplicationStop:\n    - location: scripts/stop_application.sh\n      timeout: 300\n      runas: ubuntu\n</code></pre>"},{"location":"ci-cd-pipeline/#3-create-deployment-scripts","title":"3. Create Deployment Scripts","text":""},{"location":"ci-cd-pipeline/#scriptsbefore_installsh","title":"<code>scripts/before_install.sh</code>","text":"<pre><code>#!/bin/bash\n# Stop the application\npm2 stop mkww-website || true\npm2 delete mkww-website || true\n\n# Backup current version\nif [ -d \"/var/www/mkww-website\" ]; then\n    mv /var/www/mkww-website /var/www/mkww-website.backup.$(date +%Y%m%d_%H%M%S)\nfi\n</code></pre>"},{"location":"ci-cd-pipeline/#scriptsafter_installsh","title":"<code>scripts/after_install.sh</code>","text":"<pre><code>#!/bin/bash\ncd /var/www/mkww-website\n\n# Install dependencies\nnpm ci\n\n# Build application\nnpm run build\n\n# Set proper permissions\nsudo chown -R ubuntu:ubuntu /var/www/mkww-website\n</code></pre>"},{"location":"ci-cd-pipeline/#scriptsstart_applicationsh","title":"<code>scripts/start_application.sh</code>","text":"<pre><code>#!/bin/bash\ncd /var/www/mkww-website\n\n# Start application with PM2\npm2 start npm --name \"mkww-website\" -- start\npm2 save\n\n# Reload Nginx\nsudo systemctl reload nginx\n</code></pre>"},{"location":"ci-cd-pipeline/#scriptsstop_applicationsh","title":"<code>scripts/stop_application.sh</code>","text":"<pre><code>#!/bin/bash\n# Stop the application\npm2 stop mkww-website || true\n</code></pre>"},{"location":"ci-cd-pipeline/#docker-based-deployment","title":"Docker-based Deployment","text":""},{"location":"ci-cd-pipeline/#1-create-dockerfile","title":"1. Create Dockerfile","text":"<pre><code># Build stage\nFROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\n\nCOPY . .\nRUN npm run build\n\n# Production stage\nFROM nginx:alpine\n\n# Copy built application\nCOPY --from=builder /app/dist /usr/share/nginx/html\n\n# Copy Nginx configuration\nCOPY nginx.conf /etc/nginx/nginx.conf\n\n# Expose port\nEXPOSE 80\n\n# Start Nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"ci-cd-pipeline/#2-create-docker-compose","title":"2. Create Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  mkww-website:\n    build: .\n    ports:\n      - \"80:80\"\n    restart: unless-stopped\n    environment:\n      - NODE_ENV=production\n</code></pre>"},{"location":"ci-cd-pipeline/#3-update-github-actions-for-docker","title":"3. Update GitHub Actions for Docker","text":"<pre><code>name: Deploy with Docker\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Deploy to EC2 with Docker\n      uses: appleboy/ssh-action@v0.1.5\n      with:\n        host: ${{ secrets.EC2_HOST }}\n        username: ${{ secrets.EC2_USERNAME }}\n        key: ${{ secrets.EC2_SSH_KEY }}\n        script: |\n          cd /var/www/mkww-website\n          git pull origin main\n          docker-compose down\n          docker-compose build --no-cache\n          docker-compose up -d\n</code></pre>"},{"location":"ci-cd-pipeline/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"ci-cd-pipeline/#1-set-up-cloudwatch-alarms","title":"1. Set up CloudWatch Alarms","text":"<pre><code># Create alarm for high CPU usage\naws cloudwatch put-metric-alarm \\\n  --alarm-name \"MKWW-Website-High-CPU\" \\\n  --alarm-description \"High CPU usage on EC2 instance\" \\\n  --metric-name CPUUtilization \\\n  --namespace AWS/EC2 \\\n  --statistic Average \\\n  --period 300 \\\n  --threshold 80 \\\n  --comparison-operator GreaterThanThreshold \\\n  --evaluation-periods 2 \\\n  --alarm-actions arn:aws:sns:region:account:topic-name\n</code></pre>"},{"location":"ci-cd-pipeline/#2-set-up-application-monitoring","title":"2. Set up Application Monitoring","text":"<pre><code># Install PM2 monitoring\npm2 install pm2-server-monit\n\n# Set up PM2 monitoring dashboard\npm2 install pm2-logrotate\npm2 set pm2-logrotate:max_size 10M\npm2 set pm2-logrotate:retain 7\n</code></pre>"},{"location":"ci-cd-pipeline/#rollback-strategy","title":"Rollback Strategy","text":""},{"location":"ci-cd-pipeline/#1-automated-rollback","title":"1. Automated Rollback","text":"<p>Add to your deployment script:</p> <pre><code>#!/bin/bash\n\n# Deploy new version\ndeploy_new_version() {\n    # ... deployment steps\n}\n\n# Rollback function\nrollback() {\n    echo \"Rolling back to previous version...\"\n    cd /var/www/mkww-website\n    git reset --hard HEAD~1\n    npm ci\n    npm run build\n    pm2 restart mkww-website\n}\n\n# Health check\nhealth_check() {\n    response=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000/health)\n    if [ $response -eq 200 ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Main deployment with rollback\ndeploy_new_version\nsleep 30\n\nif ! health_check; then\n    echo \"Health check failed, rolling back...\"\n    rollback\n    exit 1\nfi\n\necho \"Deployment successful!\"\n</code></pre>"},{"location":"ci-cd-pipeline/#2-manual-rollback","title":"2. Manual Rollback","text":"<pre><code># SSH into EC2 instance\nssh -i your-key.pem ubuntu@your-ec2-ip\n\n# Rollback to previous version\ncd /var/www/mkww-website\ngit log --oneline -5\ngit reset --hard &lt;commit-hash&gt;\nnpm ci\nnpm run build\npm2 restart mkww-website\n</code></pre>"},{"location":"ci-cd-pipeline/#best-practices","title":"Best Practices","text":"<ol> <li>Always test in staging environment first</li> <li>Use blue-green deployment for zero downtime</li> <li>Implement proper logging and monitoring</li> <li>Set up automated backups before deployment</li> <li>Use environment-specific configurations</li> <li>Implement proper error handling and notifications</li> <li>Regular security updates and dependency management</li> </ol>"},{"location":"ci-cd-pipeline/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ci-cd-pipeline/#common-cicd-issues","title":"Common CI/CD Issues","text":"<ol> <li>Build failures</li> <li>Check Node.js version compatibility</li> <li>Verify all dependencies are installed</li> <li> <p>Check for syntax errors in code</p> </li> <li> <p>Deployment failures</p> </li> <li>Verify SSH key permissions</li> <li>Check EC2 instance connectivity</li> <li> <p>Review PM2 and Nginx logs</p> </li> <li> <p>Performance issues</p> </li> <li>Monitor resource usage during deployment</li> <li>Optimize build process</li> <li>Use caching strategies</li> </ol>"},{"location":"ci-cd-pipeline/#debug-commands","title":"Debug Commands","text":"<pre><code># Check GitHub Actions logs\n# Go to Actions tab in GitHub repository\n\n# Check EC2 deployment logs\nssh -i your-key.pem ubuntu@your-ec2-ip\npm2 logs mkww-website\nsudo journalctl -u nginx -f\n\n# Check application status\npm2 status\nsudo systemctl status nginx\n</code></pre>"}]}